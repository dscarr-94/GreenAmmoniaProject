# TODO: Some sort of visualizing for the user to see progress on CMD-Line

import yaml
import openpyxl

#Retrieves data from the YAML file and returns a dictionary with the vals.
def getConfigVariables():
    with open('config.yaml') as f:
        data = yaml.load(f, Loader=yaml.FullLoader)
        return data

def copyWorksheet(workbook, sheetName):
    source = workbook.active
    target = workbook.copy_worksheet(source)
    target.title = sheetName
    return target

def removeZeroRows(worksheet):
    maxRow = worksheet.max_row
    maxCol = worksheet.max_column
    rowNum = 0
    for row in worksheet.iter_rows(min_row=1, min_col=1, max_col=maxCol, max_row=maxRow, values_only=True):
        rowNum += 1
        zeroFlag = True #Assume all zero to begin with
        for item in row:
            if(isinstance(item, (float, int)) and item != None): #Is a number?
                if(item != 0): #Is it non-zero?
                    zeroFlag = False
        if(zeroFlag):
            worksheet.delete_rows(rowNum, 1)

def removeRowsBelow(worksheet):
    rowNum = 0 #loop through and find row for mass flows
    massFlowArr = []
    for row in worksheet.iter_rows(min_row=1, max_row=worksheet.max_row, min_col=1, max_col=1, values_only=True):
        rowNum += 1
        for cell in row:
            if(cell == "Mass Flows"):
               massFlowArr.append(rowNum) #More than one intance of mass flow in sheet
    worksheet.delete_rows(massFlowArr[0] + 1, worksheet.max_row) #Delete from first mass flow cell down

def removeMassRows(worksheet):
    rowNum = 0 #loop through and find row for mass flows
    massFlowArr = []
    for row in worksheet.iter_rows(min_row=1, max_row=worksheet.max_row, min_col=1, max_col=worksheet.max_column, values_only=True):
        rowNum += 1
        for cell in row:
            if(cell != None and isinstance(cell, str)):
                if("Mass" in cell):
                   massFlowArr.append(rowNum) #More than one intance of mass flow in sheet
    del massFlowArr[-1] # want to maintain mass flows 
    for mass_row in reversed(massFlowArr):
        worksheet.delete_rows(mass_row, 1) #Delete all rows that have a mention of the word "Mass"

def removeRowsWithKey(worksheet, key):
    rowNum = 0 #loop through and find row for mass flows
    keyArr = []
    for row in worksheet.iter_rows(min_row=1, max_row=worksheet.max_row, min_col=1, max_col=worksheet.max_column, values_only=True):
        rowNum += 1
        for cell in row:
            if(cell != None and isinstance(cell, str)):
                if(key in cell):
                   keyArr.append(rowNum) #More than one intance of mass flow in sheet
    for key_row in reversed(keyArr):
        worksheet.delete_rows(key_row, 1) #Delete all rows that have a mention of the word "Mass"


def findRowWithKey(worksheet, key):
    rowNum = 0 #loop through and find row for key
    for row in worksheet.iter_rows(min_row=1, max_row=worksheet.max_row, min_col=1, max_col=1, values_only=True):
        rowNum += 1
        for cell in row:
            if(cell != None and isinstance(cell, str)):
                if(key in cell):
                   return rowNum

def addTitle(worksheet, title):
	worksheet.insert_rows(1)
	worksheet['A1'] = title

def addInOut(worksheet):
	idx = 0
	rowNum = 0
	toArray = []
	fromArray = []
	for row in worksheet.iter_rows(min_row=1, max_row=worksheet.max_row, min_col=1, max_col=worksheet.max_column, values_only= True):
		idx += 1
		for cell in row:
			if(cell == "To"): 
				rowNum = idx
	idx = 0
	for cell in worksheet.iter_cols(min_row=rowNum, max_row=rowNum, min_col=1, max_col=worksheet.max_column, values_only=True):
		idx += 1
		if(cell[0] != None):
			toArray.append(idx)
	idx = 0
	rowNum = 0
	for row in worksheet.iter_rows(min_row=1, max_row=worksheet.max_row, min_col=1, max_col=worksheet.max_column, values_only= True):
		idx += 1
		for cell in row:
			if(cell == "From"): 
				rowNum = idx
	idx = 0
	for cell in worksheet.iter_cols(min_row=rowNum, max_row=rowNum, min_col=1, max_col=worksheet.max_column, values_only=True):
		idx += 1
		if(cell[0] != None):
			fromArray.append(idx)
	fromArray.pop(0)
	toArray.pop(0)
	idx = 0
	for cell in worksheet.iter_cols(min_row=1, max_row=1, min_col=1, max_col=worksheet.max_column,values_only=True):
		idx += 1
		if idx in fromArray:
			thisCell = worksheet.cell(row=1, column=idx)
			thisCell.value = "Out"
		if idx in toArray:
			thisCell = worksheet.cell(row=1, column=idx)
			thisCell.value = "In"
		if idx in toArray and idx in fromArray:
			thisCell = worksheet.cell(row=1, column=idx)
			thisCell.value = "help"


def entropyCalculations(worksheet):
    rowIdx = 0
    maxRow = worksheet.max_row
    maxCol = worksheet.max_column
    flag = False
    for row in worksheet.iter_rows(min_row=1, min_col=1,
        max_col=1, max_row=maxRow, values_only=True):
        rowIdx += 1
        for item in row:
            if(item == "Enthalpy Flow"):
                flag = True #found the one row I needed
                newRow = rowIdx + 1
                worksheet.insert_rows(newRow, 1) #Create new row below Enthalpy
                titleCell = "A" + str(newRow)
                unitCell = "B" + str(newRow)
                worksheet[titleCell] = "Entropy Flow" #Add new name for row
                worksheet[unitCell] = "kW/K"
        if(flag):
            break
    conversionFactor = 3600 * 1000

    stream_molar_flow = findRowWithKey(worksheet, "Mole Flows")
    stream_molar_entropy = findRowWithKey(worksheet, "Molar Entropy")

    for row_cells in worksheet.iter_rows(min_row=newRow, max_row=newRow,
        min_col=3, max_col=maxCol):
        for cell in row_cells:
            firstValue = worksheet[str(cell.column_letter) + str(stream_molar_entropy)]
            secondValue = worksheet[str(cell.column_letter) + str(stream_molar_flow)]
            if(firstValue.value != None and secondValue.value != None):
                calculatedValue = (firstValue.value * secondValue.value)/conversionFactor
                # print("Calculated Value: " + str(calculatedValue))
                cell.value = calculatedValue

def writeSections(worksheet, inputArr):
	writeRow = worksheet.max_row + 5
	compArr = []
	startColArr = []
	nameArr = ["Boundary temperature, K","Entropy Effect (kW/K)","Heat Effect (MW)","Work Effect (MW)"]
	idx = 0
	startColArr.append(1) 
	for column in worksheet.iter_cols(min_row=1, max_row=1, min_col=1, max_col=worksheet.max_column, values_only= True):
		if (column[0] != None): # Tuple is returned hence [0]
			compArr.append(column[0])
	for column in worksheet.iter_cols(min_row=2, max_row=2, min_col=1, max_col=worksheet.max_column, values_only= True):
		idx += 1
		if (column[0] == None):
			startColArr.append(idx + 1)
	locationDict = dict(zip(startColArr, compArr))
	for x in locationDict:
		if locationDict[x] in inputArr:
			for cntr in range(len(inputArr)):
				printCell = worksheet.cell(row=writeRow + cntr, column=x)
				printCell.value = nameArr[cntr]
	totalsColumn = 0
	lastItem = inputArr[len(inputArr) - 1]
	idx = 0
	for column in worksheet.iter_cols(min_row=1, max_row=1, min_col=1, max_col=worksheet.max_column, values_only= True):
		idx += 1
		if(column[0] == lastItem):
			totalsColumn = idx + 1
	printCell = worksheet.cell(row=writeRow-1, column=totalsColumn+4)
	printCell.value = "Totals"
	printCell = worksheet.cell(row=writeRow-1, column=totalsColumn+5)
	printCell.value = "Sum"
	# TODO: Add the section names as well as total and sum





def intialCleanup(worksheet):
    removeRowsBelow(worksheet)
    removeZeroRows(worksheet) 
    removeMassRows(worksheet)
    removeRowsWithKey(worksheet, "Maximum Relative Error")

def setupWB(worksheet, title):
	addTitle(worksheet, title)
	addInOut(worksheet)

def main():
    print("Main Source file called")
    inputData = getConfigVariables()
    """
    streamWorkbook = inputData["workbookName"]
    print("Working on: " + str(streamWorkbook))
    wb = openpyxl.load_workbook(streamWorkbook)
    overallWS = copyWorksheet(wb, "Overall")
    overallTitle = inputData["streamTitle"]
    #Begin work on streams workbook
    intialCleanup(overallWS)
    setupWB(overallWS, overallTitle)
    entropyCalculations(overallWS)
    wb.save(streamWorkbook)
    print("Completed first workbook - Steps 6-8")
    """
    #Begin work on models workbook 
    modelWorkbook = inputData["modelbookName"]
    calculationBlocks = inputData["calculationBlocks"]
    print("Working on:" + str(modelWorkbook))
    wb = openpyxl.load_workbook(modelWorkbook)
    overallWS = copyWorksheet(wb, "Overall")
    overallTitle = inputData["modelTitle"]
    writeSections(overallWS, calculationBlocks)
    wb.save(modelWorkbook)

if __name__ == '__main__':
    main()
